import tkinter as tk
from tkinter import ttk, messagebox
import math

class CalorieCounter:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Calorie Counter")
        self.root.geometry("400x300")
        self.root.resizable(False, False)
        
        # MET (Metabolic Equivalent of Task) values for different activities
        self.activities = {
            "Walking (3.5 mph)": 4.3,
            "Running (6 mph)": 9.8,
            "Running (8 mph)": 13.5,
            "Cycling (12-14 mph)": 8.0,
            "Swimming (moderate)": 5.8,
            "Swimming (vigorous)": 10.0,
            "Weightlifting": 6.0,
            "Yoga": 2.5,
            "Dancing": 4.8,
            "Jump Rope": 12.3,
            "Basketball": 6.5,
            "Soccer": 7.0,
            "Tennis": 7.3,
            "Rowing": 8.5,
            "Elliptical": 7.0,
            "Stair Climbing": 8.8
        }
        
        self.setup_ui()
    
    def setup_ui(self):
        # Main frame
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Title
        title_label = ttk.Label(main_frame, text="Workout Calorie Calculator", 
                               font=("Arial", 16, "bold"))
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))
        
        # Weight input
        ttk.Label(main_frame, text="Weight (kg):").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.weight_var = tk.StringVar()
        weight_entry = ttk.Entry(main_frame, textvariable=self.weight_var, width=15)
        weight_entry.grid(row=1, column=1, sticky=tk.W, pady=5)
        
        # Activity selection
        ttk.Label(main_frame, text="Activity:").grid(row=2, column=0, sticky=tk.W, pady=5)
        self.activity_var = tk.StringVar()
        activity_combo = ttk.Combobox(main_frame, textvariable=self.activity_var, 
                                     values=list(self.activities.keys()), 
                                     state="readonly", width=20)
        activity_combo.grid(row=2, column=1, sticky=tk.W, pady=5)
        activity_combo.set("Walking (3.5 mph)")  # Default selection
        
        # Duration input
        ttk.Label(main_frame, text="Duration (minutes):").grid(row=3, column=0, sticky=tk.W, pady=5)
        self.duration_var = tk.StringVar()
        duration_entry = ttk.Entry(main_frame, textvariable=self.duration_var, width=15)
        duration_entry.grid(row=3, column=1, sticky=tk.W, pady=5)
        
        # Calculate button
        calc_button = ttk.Button(main_frame, text="Calculate Calories", 
                                command=self.calculate_calories)
        calc_button.grid(row=4, column=0, columnspan=2, pady=20)
        
        # Result display
        self.result_frame = ttk.LabelFrame(main_frame, text="Results", padding="10")
        self.result_frame.grid(row=5, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=10)
        
        self.result_label = ttk.Label(self.result_frame, text="Enter your details and click Calculate", 
                                     font=("Arial", 12))
        self.result_label.grid(row=0, column=0)
        
        # Info button
        info_button = ttk.Button(main_frame, text="About MET Values", 
                                command=self.show_info)
        info_button.grid(row=6, column=0, columnspan=2, pady=10)
    
    def calculate_calories(self):
        try:
            # Get input values
            weight = float(self.weight_var.get())
            activity = self.activity_var.get()
            duration = float(self.duration_var.get())
            
            # Validate inputs
            if weight <= 0 or duration <= 0:
                messagebox.showerror("Error", "Weight and duration must be positive numbers!")
                return
            
            if not activity:
                messagebox.showerror("Error", "Please select an activity!")
                return
            
            # Calculate calories using MET formula
            # Calories = MET × weight (kg) × time (hours)
            met_value = self.activities[activity]
            time_hours = duration / 60
            calories_burned = met_value * weight * time_hours
            
            # Display result
            result_text = f"Calories Burned: {calories_burned:.1f}\n\n"
            result_text += f"Activity: {activity}\n"
            result_text += f"Duration: {duration} minutes\n"
            result_text += f"Weight: {weight} kg\n"
            result_text += f"MET Value: {met_value}"
            
            self.result_label.config(text=result_text)
            
        except ValueError:
            messagebox.showerror("Error", "Please enter valid numbers for weight and duration!")
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {str(e)}")
    
    def show_info(self):
        info_text = """MET (Metabolic Equivalent of Task) Values:

MET represents the energy cost of physical activities as a multiple of resting metabolic rate.

Formula: Calories = MET × Weight (kg) × Time (hours)

Examples:
• 1 MET = sitting quietly
• 3-6 METs = light to moderate activity
• 6+ METs = vigorous activity

Note: Individual results may vary based on fitness level, body composition, and other factors."""
        
        messagebox.showinfo("About MET Values", info_text)
    
    def run(self):
        self.root.mainloop()

# Create and run the application
if __name__ == "__main__":
    app = CalorieCounter()
    app.run()
